set.seed(1)
fit.g <- kmeans(relist.g$A, K)
metricList$ARI[i,5] <- cluster_metric(fit.g$cluster, Y, type='ARI')
metricList$NMI[i,5] <- cluster_metric(fit.g$cluster, Y, type='NMI')
# metricList$Tr[i,5] <- GFM::measurefun(relist.g$A, H)
# metricList$Dist[i,5] <- dis_fun(relist.g$A, H)
metricList$timeMat[i,5] <- relist.g$time.use
metricList$F1score[i,5] <- classific_metric(relist.g$w, w0, type='F1score')
metricList$ACC[i,5] <- classific_metric(relist.g$w, w0, type='ACC')
# classific_metric(relist.g$w, w0, type='Precision')
# classific_metric(relist.g$w, w0, type='Recall')
#
# classific_metric(relist.g$w, w0, type='Precision')
# classific_metric(relist.g$w, w0, type='Recall')
#
metricList$R2[i,5] <-get_r2_mcfadden(relist.g$A, factor(Y))
sapply(metricList, colMeans, na.rm=T)
fit.permute <- KPCA.Permute.fit(X, dim.PCs=2, num.fea = 4)
hw <- rep(0, p); hw[fit.permute$fea.select] <- 1
# GFM::measurefun(fit.permute$PCs, H)
metricList$R2[i,2] <- get_r2_mcfadden(fit.permute$PCs, factor(Y))
set.seed(1)
fit.g <- kmeans(fit.permute$PCs, K)
# metricList$Tr[i,2] <- GFM::measurefun(fit.permute$PCs, H)
# metricList$Dist[i,2] <- dis_fun(fit.permute$PCs, H)
metricList$timeMat[i,2] <- fit.permute$time.use
metricList$ARI[i,2] <- cluster_metric(fit.g$cluster, Y, type='ARI')
metricList$NMI[i,2] <- cluster_metric(fit.g$cluster, Y, type='NMI')
metricList$F1score[i,2] <- classific_metric(hw, w0, type='F1score')
metricList$ACC[i,2] <-classific_metric(hw, w0, type='ACC')
tic <- proc.time()
fit.spca <- SPCA.fit(X, dim.PCs=2, num.fea=4, method=c("SPCA"),deltaK=0,
logalpha.start=-2, logalpha.end = -0.01, log.step=0.01) #  "RSPCA"
toc <- proc.time()
hw <- rep(0, p); hw[rowSums(abs(fit.spca$loadings))>0] <- 1
metricList$R2[i,3] <-get_r2_mcfadden(fit.spca$scores, factor(Y))
set.seed(1)
fit.g <- kmeans(fit.spca$scores, K)
# metricList$Tr[i,3] <- GFM::measurefun(fit.spca$scores, H)
# metricList$Dist[i,3] <- dis_fun(fit.spca$scores, H)
metricList$timeMat[i,3] <- toc[3] - tic[3]
metricList$ARI[i,3] <- cluster_metric(fit.g$cluster, Y, type='ARI')
metricList$NMI[i,3] <- cluster_metric(fit.g$cluster, Y, type='NMI')
metricList$F1score[i,3] <-classific_metric(hw, w0, type='F1score')
metricList$ACC[i,3] <-classific_metric(hw, w0, type='ACC')
tic <- proc.time()
fit.rspca <- SPCA.fit(X, dim.PCs=2, num.fea=4, method=c("RSPCA"),,deltaK=0,
logalpha.start=-2, logalpha.end = -0.01, log.step=0.01) #  "RSPCA"
toc <- proc.time()
metricList$R2[i,4] <-get_r2_mcfadden(fit.rspca$scores, factor(Y))
hw <- rep(0, p); hw[rowSums(abs(fit.rspca$loadings))>0] <- 1
set.seed(1)
fit.g <- kmeans(fit.rspca$scores, K)
# metricList$Tr[i,4] <- GFM::measurefun(fit.rspca$scores, H)
# metricList$Dist[i,4] <- dis_fun(fit.rspca$scores, H)
metricList$timeMat[i,4] <- toc[3] - tic[3]
metricList$ARI[i,4] <- cluster_metric(fit.g$cluster, Y, type='ARI')
metricList$NMI[i,4] <- cluster_metric(fit.g$cluster, Y, type='NMI')
metricList$F1score[i,4] <-classific_metric(hw, w0, type='F1score')
metricList$ACC[i,4] <-classific_metric(hw, w0, type='ACC')
fit.permute <- KPCA.Permute.fit(X, dim.PCs=2, num.fea = 4, kern.type ="gaussian.radial.basis")
hw <- rep(0, p); hw[fit.permute$fea.select] <- 1
# GFM::measurefun(fit.permute$PCs, H)
metricList$R2[i,6] <- get_r2_mcfadden(fit.permute$PCs, factor(Y))
set.seed(1)
fit.g <- kmeans(fit.permute$PCs, K)
metricList$timeMat[i,6] <- fit.permute$time.use
metricList$ARI[i,6] <- cluster_metric(fit.g$cluster, Y, type='ARI')
metricList$NMI[i,6] <- cluster_metric(fit.g$cluster, Y, type='NMI')
metricList$F1score[i,6] <- classific_metric(hw, w0, type='F1score')
metricList$ACC[i,6] <-classific_metric(hw, w0, type='ACC')
res.IG <- kpcaIG.fit(X, dim.PCs = 2, num.fea = 4, kern.type = 'polydot')
hw <- rep(0, p); hw[res.IG$fea.select] <- 1
# GFM::measurefun(fit.permute$PCs, H)
metricList$R2[i,7] <- get_r2_mcfadden(res.IG$PCs, factor(Y))
set.seed(1)
fit.g <- kmeans(res.IG$PCs,  K)
metricList$timeMat[i,7] <- res.IG$time.use
metricList$ARI[i,7] <- cluster_metric(fit.g$cluster, Y, type='ARI')
metricList$NMI[i,7] <- cluster_metric(fit.g$cluster, Y, type='NMI')
metricList$F1score[i,7] <- classific_metric(hw, w0, type='F1score')
metricList$ACC[i,7] <-classific_metric(hw, w0, type='ACC')
res.IG <- kpcaIG.fit(X, dim.PCs = 2, num.fea = 4, kern.type = "rbfdot")
hw <- rep(0, p); hw[res.IG$fea.select] <- 1
# GFM::measurefun(fit.permute$PCs, H)
metricList$R2[i,8] <- get_r2_mcfadden(res.IG$PCs, factor(Y))
set.seed(1)
fit.g <- kmeans(res.IG$PCs,  K)
metricList$timeMat[i,8] <- res.IG$time.use
metricList$ARI[i,8] <- cluster_metric(fit.g$cluster, Y, type='ARI')
metricList$NMI[i,8] <- cluster_metric(fit.g$cluster, Y, type='NMI')
metricList$F1score[i,8] <- classific_metric(hw, w0, type='F1score')
metricList$ACC[i,8] <-classific_metric(hw, w0, type='ACC')
sapply(metricList, colMeans, na.rm=T)
sapply(metricList, colMeans, na.rm=T)
res.IG
res.IG$fea.select
sapply(metricList, colMeans, na.rm=T)
SKPCA.FS
SKPCA:::sketchfun_cpp
n <- 10
1/2 - rbinom(n, 1, 0.5)
setwd("D:\\Working\\Research paper\\cooperateProjects\\KernelPCA\\simu")
# setwd("/data/liuw/Projects/KernelPCA/simu")
source("helpfunc.R")
library(SKPCA)
library(kernlab)
library(GFM)
n <- 1000; p <- 100; q <- 20
datlist <- gendata(n=n, p = p, q=q, seed=1)
str(datlist)
hsigma <- select.bw(datlist$X)
message('hsigma=', hsigma)
kern <- rbfdot(sigma = hsigma)
# kern <- polydot()
dim.PCs <- 10
relist.opca <- oKPCA(datlist$X, d=dim.PCs,  kern=kern)
str(relist.opca)
relist.skpca.sg <- SKPCA(datlist$X, d=dim.PCs, kern=kern, m=40, Stype = 'subGaussian', seed=1, use.R = T)
str(relist.skpca.sg)
relist.skpca.sg <- SKPCA(datlist$X, d=dim.PCs, kern=kern, m=40, Stype = 'subSampling', seed=1, use.R=T)
str(relist.skpca.sg)
relist.skpca.ros <- SKPCA(datlist$X, d=dim.PCs, kern=kern, m=40, Stype = 'ROS', seed=1, use.R=T)
str(relist.skpca.ros)
str(relist.skpca.sg)
str(relist.opca)
relist.skpca.sg <- SKPCA(datlist$X, d=dim.PCs, kern=kern, m=40, Stype = 'subGaussian', seed=1, use.R = T)
str(relist.skpca.sg)
relist.skpca.ros <- SKPCA(datlist$X, d=dim.PCs, kern=kern, m=40, Stype = 'ROS', seed=1, use.R=T)
str(relist.skpca.ros)
relist.skpca.sg <- SKPCA(datlist$X, d=dim.PCs, kern=kern, m=40, Stype = 'subSampling', seed=1, use.R=T)
str(relist.skpca.sg)
SKPCA
relist.skpca.ros <- SKPCA(datlist$X, d=dim.PCs, kern=kern, m=40, Stype = 'ROS', seed=1, use.R=T)
str(relist.skpca.ros)
relist.skpca.ros <- SKPCA(datlist$X, d=dim.PCs, kern=kern, m=40, Stype = 'ROS', seed=1, use.R=T)
str(relist.skpca.ros)
relist.skpca.sg <- SKPCA(datlist$X, d=dim.PCs, kern=kern, m=40, Stype = 'subSampling', seed=1, use.R=T)
str(relist.skpca.sg)
relist.skpca.sg <- SKPCA(datlist$X, d=dim.PCs, kern=kern, m=40, Stype = 'subGaussian', seed=1, use.R = T)
str(relist.skpca.sg)
rnorm(n*n)*rvec
rvec <-  1/2 - rbinom(n, 1, 0.5)
rnorm(n*n)*rvec,n,n)
rnorm(n*n)*rvec
relist.skpca.ros <- SKPCA(datlist$X, d=dim.PCs, kern=kern, m=40, Stype = 'ROS', seed=1, use.R=T)
str(relist.skpca.ros)
relist.skpca.sg <- SKPCA(datlist$X, d=dim.PCs, kern=kern, m=40, Stype = 'subSampling', seed=1, use.R=T)
str(relist.skpca.sg)
relist.skpca.sg <- SKPCA(datlist$X, d=dim.PCs, kern=kern, m=40, Stype = 'subGaussian', seed=1, use.R = T)
str(relist.skpca.sg)
relist.skpca.ros <- SKPCA(datlist$X, d=dim.PCs, kern=kern, m=40, Stype = 'ROS', seed=1, use.R=T)
str(relist.skpca.ros)
# 1. Fix sketch type and dimension of PCs, varing m -----------------------
hsigma <- 1e-4
message('hsigma=', hsigma)
kern <- rbfdot(sigma = hsigma)
#kern <- polydot()
Stype.vec <- c('subGaussian', 'ROS', 'subSampling')
Stype <- Stype.vec[3]
dim.PCs <- 20
N <- 1
m.vec <- round(seq(dim.PCs+1, round(sqrt(n))+30, len=10))
time.kpca.vec <- rep(NA, N)
n_methods <- length(m.vec) + 1
metricList <- list(Err.Tr=matrix(NA,N, n_methods), Err.F=matrix(NA, N, n_methods),
Dist.eigs=matrix(NA,N, n_methods),
timeMat = matrix(NA, N, n_methods))
for(i in 1:length(metricList)) colnames(metricList[[i]]) <- c(m.vec, "oKPCA")
for(i in 1:N){
# i <- 1
message('i = ', i)
datlist <- gendata(n=n, p = p, seed=i)
str(datlist)
relist.opca <- oKPCA(datlist$X, d=dim.PCs,  kern=kern)
metricList$Err.Tr[i,n_methods] <- dis_fun( relist.opca$alpha, datlist$U)
metricList$Err.F[i,n_methods] <- project.err(relist.opca$alpha,  datlist$U)
metricList$timeMat[i,n_methods] <- relist.opca$time.use
for(mi in 1:length(m.vec)){
relist.skpca.sg <- SKPCA(datlist$X, d=dim.PCs, kern=kern, m=m.vec[mi], Stype = Stype, seed=10)
metricList$Err.Tr[i,mi] <- dis_fun( relist.skpca.sg$A, datlist$U)
metricList$Err.F[i,mi] <- project.err(relist.skpca.sg$A,  datlist$U)
metricList$Dist.eigs[i,mi] <- mean(abs(relist.opca$eigvalues[1:dim.PCs]- relist.skpca.sg$eigvalues[1:dim.PCs]))
metricList$timeMat[i,mi] <- relist.skpca.sg$time.use
}
}
relist.opca <- oKPCA(datlist$X, d=dim.PCs,  kern=kern)
metricList$Err.Tr[i,n_methods] <- dis_fun( relist.opca$alpha, datlist$U)
library(GFM)
metricList$Err.Tr[i,n_methods] <- dis_fun( relist.opca$alpha, datlist$U)
# setwd("/data/liuw/Projects/KernelPCA/simu")
source("helpfunc.R")
library(SKPCA)
library(kernlab)
library(GFM)
metricList$Err.Tr[i,n_methods] <- dis_fun( relist.opca$alpha, datlist$U)
library(MASS)
relist.opca <- oKPCA(datlist$X, d=dim.PCs,  kern=kern)
metricList$Err.Tr[i,n_methods] <- dis_fun( relist.opca$alpha, datlist$U)
metricList$Err.F[i,n_methods] <- project.err(relist.opca$alpha,  datlist$U)
metricList$timeMat[i,n_methods] <- relist.opca$time.use
Stype <- Stype.vec[2]
dim.PCs <- 20
N <- 1
m.vec <- round(seq(dim.PCs+1, round(sqrt(n))+30, len=10))
time.kpca.vec <- rep(NA, N)
n_methods <- length(m.vec) + 1
metricList <- list(Err.Tr=matrix(NA,N, n_methods), Err.F=matrix(NA, N, n_methods),
Dist.eigs=matrix(NA,N, n_methods),
timeMat = matrix(NA, N, n_methods))
for(i in 1:length(metricList)) colnames(metricList[[i]]) <- c(m.vec, "oKPCA")
for(i in 1:N){
# i <- 1
message('i = ', i)
datlist <- gendata(n=n, p = p, seed=i)
str(datlist)
relist.opca <- oKPCA(datlist$X, d=dim.PCs,  kern=kern)
metricList$Err.Tr[i,n_methods] <- dis_fun( relist.opca$alpha, datlist$U)
metricList$Err.F[i,n_methods] <- project.err(relist.opca$alpha,  datlist$U)
metricList$timeMat[i,n_methods] <- relist.opca$time.use
for(mi in 1:length(m.vec)){
relist.skpca.sg <- SKPCA(datlist$X, d=dim.PCs, kern=kern, m=m.vec[mi], Stype = Stype, seed=10)
metricList$Err.Tr[i,mi] <- dis_fun( relist.skpca.sg$A, datlist$U)
metricList$Err.F[i,mi] <- project.err(relist.skpca.sg$A,  datlist$U)
metricList$Dist.eigs[i,mi] <- mean(abs(relist.opca$eigvalues[1:dim.PCs]- relist.skpca.sg$eigvalues[1:dim.PCs]))
metricList$timeMat[i,mi] <- relist.skpca.sg$time.use
}
}
sapply(metricList, colMeans, na.rm=T)
sapply(metricList, colSD, na.rm=T)
sapply(metricList, colMeans, na.rm=T) - 1.96* sapply(metricList, colSD, na.rm=T)
sapply(metricList, colMeans, na.rm=T) + 1.96* sapply(metricList, colSD, na.rm=T)
for(i in 1:N){
# i <- 1
message('i = ', i)
datlist <- gendata(n=n, p = p, seed=i)
str(datlist)
relist.opca <- oKPCA(datlist$X, d=dim.PCs,  kern=kern)
metricList$Err.Tr[i,n_methods] <- dis_fun( relist.opca$alpha, datlist$U)
metricList$Err.F[i,n_methods] <- project.err(relist.opca$alpha,  datlist$U)
metricList$timeMat[i,n_methods] <- relist.opca$time.use
for(mi in 1:length(m.vec)){
relist.skpca.sg <- SKPCA(datlist$X, d=dim.PCs, kern=kern, m=m.vec[mi], Stype = Stype, seed=10, use.R=TRUE)
metricList$Err.Tr[i,mi] <- dis_fun( relist.skpca.sg$A, datlist$U)
metricList$Err.F[i,mi] <- project.err(relist.skpca.sg$A,  datlist$U)
metricList$Dist.eigs[i,mi] <- mean(abs(relist.opca$eigvalues[1:dim.PCs]- relist.skpca.sg$eigvalues[1:dim.PCs]))
metricList$timeMat[i,mi] <- relist.skpca.sg$time.use
}
}
sapply(metricList, colMeans, na.rm=T)
str(relist.opca)
relist.skpca.sg <- SKPCA(datlist$X, d=dim.PCs, kern=kern, m=40, Stype = 'subGaussian', seed=1, use.R = T)
str(relist.skpca.sg)
relist.skpca.ros <- SKPCA(datlist$X, d=dim.PCs, kern=kern, m=40, Stype = 'ROS', seed=1, use.R=T)
str(relist.skpca.ros)
relist.skpca.sg <- SKPCA(datlist$X, d=dim.PCs, kern=kern, m=40, Stype = 'subSampling', seed=1, use.R=T)
str(relist.skpca.sg)
relist.skpca.sg <- SKPCA(datlist$X, d=dim.PCs, kern=kern, m=40, Stype = 'subGaussian', seed=1, use.R = T)
str(relist.skpca.sg)
relist.skpca.ros <- SKPCA(datlist$X, d=dim.PCs, kern=kern, m=40, Stype = 'ROS', seed=1, use.R=T)
str(relist.skpca.ros)
relist.skpca.sg <- SKPCA(datlist$X, d=dim.PCs, kern=kern, m=40, Stype = 'subSampling', seed=1, use.R=T)
str(relist.skpca.sg)
datlist <- gendata(n=n, p = p, q=q, seed=1)
str(datlist)
hsigma <- select.bw(datlist$X)
message('hsigma=', hsigma)
kern <- rbfdot(sigma = hsigma)
# kern <- polydot()
dim.PCs <- 10
relist.opca <- oKPCA(datlist$X, d=dim.PCs,  kern=kern)
str(relist.opca)
relist.skpca.sg <- SKPCA(datlist$X, d=dim.PCs, kern=kern, m=40, Stype = 'subGaussian', seed=1, use.R = T)
str(relist.skpca.sg)
relist.skpca.ros <- SKPCA(datlist$X, d=dim.PCs, kern=kern, m=40, Stype = 'ROS', seed=1, use.R=T)
str(relist.skpca.ros)
relist.skpca.sg <- SKPCA(datlist$X, d=dim.PCs, kern=kern, m=40, Stype = 'subSampling', seed=1, use.R=T)
str(relist.skpca.sg)
rm(list=ls())
setwd("D:\\Working\\Research paper\\cooperateProjects\\KernelPCA\\simu")
# setwd("/data/liuw/Projects/KernelPCA/simu")
source("helpfunc.R")
library(SKPCA)
#install.packages("kpcaIG")
# case 1 ---------------------------
data("iris")
str(iris)
# library(kpcaIG)
# X <- as.matrix(iris[,1:4])
# colnames(X) <- paste0("V", 1:ncol(X))
# kpca_tan <- kernelpca(X,
#                       kernel = "rbfdot") # polydot
# kpca_ig_tan <- kpca_igrad(kpca_tan, dim = c(1,2))
# str(kpca_ig_tan)
# str(kpca_tan)
# head(kpca_ig_tan)
dim.PCs <- 2
nsample <- 1000
set.seed(1)
idx_resample <- sample( nrow(iris), nsample,replace = TRUE)
iris.upsample <- iris[idx_resample, ]
n <- nrow(iris.upsample)
methodNames <- c("SKPCA.FS-L", "KPCA-Permute", "SPCA", "RSPCA",
"SKPCA.FS-G","KPCA-Permute-G", 'KPCA-IG-L', "KPCA-IG-G")
n_methods <- length(methodNames)
N <- 1
metricList <- list(Tr=matrix(NA,N, n_methods), Dist=matrix(NA, N, n_methods),
ARI=matrix(NA,N, n_methods), NMI=matrix(NA, N, n_methods),
F1score=matrix(NA,N, n_methods), ACC = matrix(NA,N, n_methods),
R2=matrix(NA,N, n_methods),timeMat = matrix(NA, N, n_methods))
for(i in 1:length(metricList)) colnames(metricList[[i]]) <- methodNames
i <- 1
message('i = ', i)
Y <- factor(iris.upsample$Species); K <- length(unique(Y))
set.seed(i)
X.u <- matrix(rnorm(n*10), n, 10)
X.f <- as.matrix(iris.upsample[,1:4]) + matrix(rnorm(n*4,  sd=0.1), n, 4)
X <- cbind(X.f, X.u)
p <- ncol(X)
X.s <- scale(X)
w0 <- rep(0, p); w0[1:4] <- 1
relist.l <- SKPCA.FS(X.s, dim.PCs=2, num.fea=4, dim.sketch=5)
str(relist.l)
plot(relist.l$A, col=Y)
relist.l <- SKPCA.FS(X.s, dim.PCs=2, num.fea=4, dim.sketch=5, use.R = T)
str(relist.l)
plot(relist.l$A, col=Y)
relist.l <- SKPCA.FS(X.s, dim.PCs=2, num.fea=4, dim.sketch=5, use.R = T, Stype='ROS')
str(relist.l)
SKPCA.FS
relist.g <- SKPCA.FS(X.s, dim.PCs=2, num.fea=4, dim.sketch=4,  kern.type = 'gaussian',
gaussian.method  = 'M1', kernel = rbfdot(sigma = 0.001))
str(relist.g)
relist.g <- SKPCA.FS(X.s, dim.PCs=2, num.fea=4, dim.sketch=4,  kern.type = 'gaussian',
gaussian.method  = 'M1', kernel.use = rbfdot(sigma = 0.001))
str(relist.g)
update_w
rm(list=ls())
setwd("D:\\Working\\Research paper\\cooperateProjects\\KernelPCA\\simu")
# setwd("/data/liuw/Projects/KernelPCA/simu")
source("helpfunc.R")
library(SKPCA)
#install.packages("kpcaIG")
# case 1 ---------------------------
data("iris")
str(iris)
# library(kpcaIG)
# X <- as.matrix(iris[,1:4])
# colnames(X) <- paste0("V", 1:ncol(X))
# kpca_tan <- kernelpca(X,
#                       kernel = "rbfdot") # polydot
# kpca_ig_tan <- kpca_igrad(kpca_tan, dim = c(1,2))
# str(kpca_ig_tan)
# str(kpca_tan)
# head(kpca_ig_tan)
dim.PCs <- 2
nsample <- 1000
set.seed(1)
idx_resample <- sample( nrow(iris), nsample,replace = TRUE)
iris.upsample <- iris[idx_resample, ]
n <- nrow(iris.upsample)
methodNames <- c("SKPCA.FS-L", "KPCA-Permute", "SPCA", "RSPCA",
"SKPCA.FS-G","KPCA-Permute-G", 'KPCA-IG-L', "KPCA-IG-G")
n_methods <- length(methodNames)
N <- 1
metricList <- list(Tr=matrix(NA,N, n_methods), Dist=matrix(NA, N, n_methods),
ARI=matrix(NA,N, n_methods), NMI=matrix(NA, N, n_methods),
F1score=matrix(NA,N, n_methods), ACC = matrix(NA,N, n_methods),
R2=matrix(NA,N, n_methods),timeMat = matrix(NA, N, n_methods))
for(i in 1:length(metricList)) colnames(metricList[[i]]) <- methodNames
i <- 1
message('i = ', i)
Y <- factor(iris.upsample$Species); K <- length(unique(Y))
set.seed(i)
X.u <- matrix(rnorm(n*10), n, 10)
X.f <- as.matrix(iris.upsample[,1:4]) + matrix(rnorm(n*4,  sd=0.1), n, 4)
X <- cbind(X.f, X.u)
p <- ncol(X)
X.s <- scale(X)
w0 <- rep(0, p); w0[1:4] <- 1
relist.l <- SKPCA.FS(X.s, dim.PCs=2, num.fea=4, dim.sketch=5)
str(relist.l)
plot(relist.l$A, col=Y)
SKPCA.FS
relist.g <- SKPCA.FS(X.s, dim.PCs=2, num.fea=4, dim.sketch=4,  kern.type = 'gaussian',
gaussian.method  = 'M1', kernel.use = rbfdot(sigma = 0.001))
relist.g <- SKPCA.FS(X.s, dim.PCs=2, num.fea=4, dim.sketch=4,  kern.type = 'gaussian',
kernel.use = rbfdot(sigma = 0.001))
str(relist.g)
SPCA.fit
methodNames <- c("SKPCA.FS-L", "KPCA-Permute-L", "SPCA", "RSPCA",
"SKPCA.FS-G","KPCA-Permute-G", 'KPCA-IG-L', "KPCA-IG-G")
n_methods <- length(methodNames)
PCList <- list(PC.array=array(dim=c(n, dim.PCs, n_methods)), methodNames=methodNames)
timeList <- list(time.vec= rep(NA, n_methods)); names(timeList[[1]]) <- methodNames
kpcaIG.fit
rm(list=ls())
setwd("D:\\Working\\Research paper\\cooperateProjects\\KernelPCA\\simu")
# setwd("/data/liuw/Projects/KernelPCA/simu")
source("helpfunc.R")
library(SKPCA)
#install.packages("kpcaIG")
# case 1 ---------------------------
data("iris")
str(iris)
# library(kpcaIG)
# X <- as.matrix(iris[,1:4])
# colnames(X) <- paste0("V", 1:ncol(X))
# kpca_tan <- kernelpca(X,
#                       kernel = "rbfdot") # polydot
# kpca_ig_tan <- kpca_igrad(kpca_tan, dim = c(1,2))
# str(kpca_ig_tan)
# str(kpca_tan)
# head(kpca_ig_tan)
dim.PCs <- 2
nsample <- 1000
set.seed(1)
idx_resample <- sample( nrow(iris), nsample,replace = TRUE)
iris.upsample <- iris[idx_resample, ]
n <- nrow(iris.upsample)
methodNames <- c("SKPCA.FS-L", "KPCA-Permute", "SPCA", "RSPCA",
"SKPCA.FS-G","KPCA-Permute-G", 'KPCA-IG-L', "KPCA-IG-G")
n_methods <- length(methodNames)
N <- 1
metricList <- list(Tr=matrix(NA,N, n_methods), Dist=matrix(NA, N, n_methods),
ARI=matrix(NA,N, n_methods), NMI=matrix(NA, N, n_methods),
F1score=matrix(NA,N, n_methods), ACC = matrix(NA,N, n_methods),
R2=matrix(NA,N, n_methods),timeMat = matrix(NA, N, n_methods))
for(i in 1:length(metricList)) colnames(metricList[[i]]) <- methodNames
data("iris")
str(iris)
dim.PCs <- 2
nsample <- 1000
set.seed(1)
idx_resample <- sample( nrow(iris), nsample,replace = TRUE)
iris.upsample <- iris[idx_resample, ]
n <- nrow(iris.upsample)
methodNames <- c("SKPCA.FS-L", "KPCA-Permute-L",
'KPCA-IG-L',"SKPCA.FS-G", "KPCA-Permute-G", "KPCA-IG-G")
q.vec <- c(8, 12, 18, 24, 50, 100)
q.use <- q.vec[1]
N <- 2
p <- 4+ q.use
metricList <- list(imp.score=array(dim=c(p, length(methodNames),N)))
for(ii in 1:length(metricList)) colnames(metricList[[ii]]) <- methodNames
scale2one <- function(x) x/sum(x)
fit.permute <- KPCA.Permute.fit(X, dim.PCs=2, num.fea = 4, kern.type ="gaussian.radial.basis")
i <- 1
message('i = ', i)
Y <- factor(iris.upsample$Species); K <- length(unique(Y))
set.seed(i)
X.u <- matrix(rnorm(n*q.use), n, q.use)
X.f <- as.matrix(iris.upsample[,1:4]) + matrix(rnorm(n*4,  sd=0.1), n, 4)
X <- cbind(X.f, X.u)
p <- ncol(X)
w0 <- rep(0, p); w0[1:4] <- 1
relist.l <- SKPCA.FS(X, dim.PCs=2, num.fea=4)
str(relist.l)
barplot(relist.l$importance.scores)
metricList$imp.score[,1, i] <- relist.l$importance.scores
fit.permute <- KPCA.Permute.fit(X, dim.PCs=2, num.fea = 4, kern.type ="gaussian.radial.basis")
barplot(fit.permute$cc.dist)
metricList$imp.score[,5, i] <- scale2one(fit.permute$cc.dist)
str(fit.permute)
res.IG <- kpcaIG.fit(X, dim.PCs = 2, num.fea = 4, kern.type = "rbfdot")
str(res.IG)
diag(100)
n <- 100
m <- 40
ind <- sample(n, m)
rvec <-  1/2 - rbinom(n, 1, 0.5)
sqrt(n/m)* diagonal(n)[ind,])
diagonal(n)[ind,]
diag(n)[ind,]
dim(diag(n)[ind,])
setwd("D:\\Working\\Research paper\\cooperateProjects\\KernelPCA\\simu")
# setwd("/data/liuw/Projects/KernelPCA/simu")
source("helpfunc.R")
library(MASS)
library(SKPCA)
library(kernlab)
library(GFM)
n <- 1000; p <- 100; q <- 20
datlist <- gendata(n=n, p = p, q=q, seed=1)
str(datlist)
hsigma <- select.bw(datlist$X)
message('hsigma=', hsigma)
kern <- rbfdot(sigma = hsigma)
# kern <- polydot()
dim.PCs <- 10
relist.opca <- oKPCA(datlist$X, d=dim.PCs,  kern=kern)
str(relist.opca)
relist.skpca.sg <- SKPCA(datlist$X, d=dim.PCs, kern=kern, m=40, Stype = 'subGaussian', seed=1, use.R = T)
str(relist.skpca.sg)
relist.skpca.ros <- SKPCA(datlist$X, d=dim.PCs, kern=kern, m=40, Stype = 'ROS', seed=1, use.R=T)
str(relist.skpca.ros)
relist.skpca.sg <- SKPCA(datlist$X, d=dim.PCs, kern=kern, m=40, Stype = 'subSampling', seed=1, use.R=T)
str(relist.skpca.sg)
n <- 5000; p <- 100; q <- 20
datlist <- gendata(n=n, p = p, q=q, seed=1)
str(datlist)
hsigma <- select.bw(datlist$X)
message('hsigma=', hsigma)
kern <- rbfdot(sigma = hsigma)
# kern <- polydot()
dim.PCs <- 10
relist.skpca.sg <- SKPCA(datlist$X, d=dim.PCs, kern=kern, m=40, Stype = 'subGaussian', seed=1, use.R = T)
str(relist.skpca.sg)
relist.skpca.ros <- SKPCA(datlist$X, d=dim.PCs, kern=kern, m=40, Stype = 'ROS', seed=1, use.R=T)
str(relist.skpca.ros)
relist.skpca.sg <- SKPCA(datlist$X, d=dim.PCs, kern=kern, m=40, Stype = 'subSampling', seed=1, use.R=T)
str(relist.skpca.sg)
