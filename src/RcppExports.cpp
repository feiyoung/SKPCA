// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// sketchfun_cpp
arma::sp_mat sketchfun_cpp(const int& m, const int& n, const std::string& type);
RcppExport SEXP _SKPCA_sketchfun_cpp(SEXP mSEXP, SEXP nSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type m(mSEXP);
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(sketchfun_cpp(m, n, type));
    return rcpp_result_gen;
END_RCPP
}
// kernelMatrix_cpp
arma::mat kernelMatrix_cpp(const Rcpp::Function& kernel, const arma::mat& x);
RcppExport SEXP _SKPCA_kernelMatrix_cpp(SEXP kernelSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::Function& >::type kernel(kernelSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(kernelMatrix_cpp(kernel, x));
    return rcpp_result_gen;
END_RCPP
}
// SKPCA_cpp
Rcpp::List SKPCA_cpp(const arma::mat& X, const Rcpp::Function& kernel, const int& d, const int& m, const std::string& Stype);
RcppExport SEXP _SKPCA_SKPCA_cpp(SEXP XSEXP, SEXP kernelSEXP, SEXP dSEXP, SEXP mSEXP, SEXP StypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const Rcpp::Function& >::type kernel(kernelSEXP);
    Rcpp::traits::input_parameter< const int& >::type d(dSEXP);
    Rcpp::traits::input_parameter< const int& >::type m(mSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type Stype(StypeSEXP);
    rcpp_result_gen = Rcpp::wrap(SKPCA_cpp(X, kernel, d, m, Stype));
    return rcpp_result_gen;
END_RCPP
}
// update_w
arma::mat update_w(const arma::mat& X, const arma::mat& A, const arma::mat& K, const int& num_fea, const std::string& Ktype, const double& Kg_h);
RcppExport SEXP _SKPCA_update_w(SEXP XSEXP, SEXP ASEXP, SEXP KSEXP, SEXP num_feaSEXP, SEXP KtypeSEXP, SEXP Kg_hSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type K(KSEXP);
    Rcpp::traits::input_parameter< const int& >::type num_fea(num_feaSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type Ktype(KtypeSEXP);
    Rcpp::traits::input_parameter< const double& >::type Kg_h(Kg_hSEXP);
    rcpp_result_gen = Rcpp::wrap(update_w(X, A, K, num_fea, Ktype, Kg_h));
    return rcpp_result_gen;
END_RCPP
}
// objfun_Cpp
double objfun_Cpp(const arma::mat& X, const arma::mat& A);
RcppExport SEXP _SKPCA_objfun_Cpp(SEXP XSEXP, SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(objfun_Cpp(X, A));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_SKPCA_sketchfun_cpp", (DL_FUNC) &_SKPCA_sketchfun_cpp, 3},
    {"_SKPCA_kernelMatrix_cpp", (DL_FUNC) &_SKPCA_kernelMatrix_cpp, 2},
    {"_SKPCA_SKPCA_cpp", (DL_FUNC) &_SKPCA_SKPCA_cpp, 5},
    {"_SKPCA_update_w", (DL_FUNC) &_SKPCA_update_w, 6},
    {"_SKPCA_objfun_Cpp", (DL_FUNC) &_SKPCA_objfun_Cpp, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_SKPCA(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
